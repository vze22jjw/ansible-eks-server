#############################################################
## NOT FOR PRODUCTION USE.                                 ##
## THE CONTENT OF THIS FILE IS FOR LEARNING PURPOSES ONLY  ##
## created by David Surey, Amazon Web Services, 2020       ##
#############################################################

- name: check if cert already existing on ACM
  delegate_to: "{{ EKSBastionInstancePublicIP }}"
  shell: > 
    aws acm list-certificates --region {{ region }} \
    | jq -r '.CertificateSummaryList | .[] | select (.DomainName == "{{ base_domain }}").DomainName'
  register: cert_existing

- name: request wildcard SSL Cert on ACM
  delegate_to: "{{ EKSBastionInstancePublicIP }}"
  shell: > 
    aws acm request-certificate --domain-name {{ base_domain }} \
    --subject-alternative-names *.{{ base_domain }} --validation-method DNS \
    --query CertificateArn --region {{ region }} --output text
  when: cert_existing.stdout == ""

- name: get cert arn on ACM for 30 seconds 
  delegate_to: "{{ EKSBastionInstancePublicIP }}"
  shell: > 
    aws acm list-certificates --region {{ region }} \
    | jq -r '.CertificateSummaryList | .[] | select (.DomainName == "{{ base_domain }}").CertificateArn'
  register: cert_arn
  retries: 5
  delay: 5
  until: "'arn:aws:acm:' in cert_arn.stdout"

- name: check ssl certificate list output before continue
  debug:
    msg: "{{ cert_arn.stdout }}"
    
- name: read ssl cert name
  delegate_to: "{{ EKSBastionInstancePublicIP }}"
  shell: >
    aws acm describe-certificate --region {{ region }} \
    --certificate-arn {{ cert_arn.stdout }} \
    --query Certificate.DomainValidationOptions[0].ResourceRecord.Name \
    --output text
  register: ssl_cert_name

- name: read ssl cert value
  delegate_to: "{{ EKSBastionInstancePublicIP }}"
  shell: > 
    aws acm describe-certificate --region {{ region }} \
    --certificate-arn {{ cert_arn.stdout }} \
    --query Certificate.DomainValidationOptions[0].ResourceRecord.Value \
    --output text
  register: ssl_cert_value

- name : create validation record set in route53
  delegate_to: "{{ EKSBastionInstancePublicIP }}"
  route53:
      state: present
      zone: "{{ base_domain }}"
      record: "{{ ssl_cert_name.stdout }}"
      type: CNAME
      ttl: 60
      value: "{{ ssl_cert_value.stdout }}"
      wait: yes
      overwrite: 'true'

- name: wait for cert validation
  delegate_to: "{{ EKSBastionInstancePublicIP }}" 
  shell: >
    aws acm wait certificate-validated --region {{ region }} --certificate-arn "{{ cert_arn.stdout }}"

- name: save SSL creation outputs to local file for ref 
  copy: 
    content: "eks_sslarn: {{ cert_arn.stdout }}" 
    dest: "{{ playbook_dir }}/vars/dynamic/{{ eks_service_name }}_eks_ssl.yaml"
